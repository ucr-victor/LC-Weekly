public class Solution {
    public int[] resultsArray(int[][] queries, int k) {
        // 使用最小堆（Java中默认的PriorityQueue行为）来存储最远的k个障碍物距离
        PriorityQueue<Integer> minHeap = new PriorityQueue<>(k, (a, b) -> b - a);
        int[] results = new int[queries.length];

        for (int i = 0; i < queries.length; i++) {
            // 计算新障碍物到原点的曼哈顿距离
            int distance = Math.abs(queries[i][0]) + Math.abs(queries[i][1]);
            
            // 如果堆未满，直接添加
            if (minHeap.size() < k) {
                minHeap.offer(distance);
            } else if (distance < minHeap.peek()) {
                // 如果当前距离小于堆顶元素（堆中最远的距离），则替换之
                minHeap.poll();
                minHeap.offer(distance);
            }
            
            // 检查堆的大小，如果还没有k个元素，返回-1，否则返回堆顶元素
            if (minHeap.size() < k) {
                results[i] = -1;
            } else {
                results[i] = minHeap.peek();
            }
        }
        
        return results;
    }
}
